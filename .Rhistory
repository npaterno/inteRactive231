geom_histogram()
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
collapse = TRUE,
comment = "#>")
library(learnr)
library(openintro)
library(dplyr)
library(readr)
library(magrittr)
library(ggplot2)
library(inteRactive231)
ggplot(data = mariokart, mapping = aes(x = n_bids)) +
geom_histogram()
ggplot(data = mariokart, mapping = aes(x = n_bids)) +
geom_histogram(color = "white")
head(diamonds)
nrow(diamonds)
summary(diamonds$price)
diamonds_summary <- diamonds |>  #This will create a new data set called diamonds_summary by taking the diamonds dataset "and then"...
group_by(clarity) |>
summarize(min = fivenum(price)[1],
q1 = fivenum(price)[2],
med = fivenum(price)[3],
q3 = fivenum(price)[4],
max = fivenum(price)[5])
knitr::kable(diamonds_summary)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(inteRactive231)
summary(diamonds$cut)
library(inteRactive231)
devtools::load_all()
library(inteRactive231)
devtools::document()
devtools::load_all()
devtools::check()
devtools::install()
devtools::load_all()
learnr::run_tutorial("lab-04", "inteRactive231")
library(inteRactive231)
learnr::run_tutorial("lab-04", "inteRactive231")
library(inteRactive231)
<<<<<<< HEAD
devtools::load_all(".")
=======
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
collapse = TRUE,
comment = "#>")
library(learnr)
library(dplyr)
library(magrittr)
library(infer)
library(openintro)
library(inteRactive231)
devtools::load_all()
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
collapse = TRUE,
comment = "#>")
library(learnr)
library(dplyr)
library(magrittr)
library(infer)
library(openintro)
library(inteRactive231)
library(inteRactive231)
prop_data <- piracy
prop_data$party <- recode(prop_data$party, "D" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
dem_count <- prop_data %>%
summarize(democrats = sum(party),
other = n()- democrats,
total = n(),
democrats_prop = democrats/total,
other_prop = other/total)
glimpse(dem_count)
z <- categorical_z(dem_count$democrats_prop, 0.50, dem_count$total) #calculate z score
z # print z score
pval <- pnorm(z, lower.tail = FALSE) #calculate the p-value
pval #print the p-value
prop_ci(dem_count$democrats_prop, 0.05, dem_count$total)
prop_data <- inteRactive231::piracy
prop_data$party <- recode(prop_data$party, "D" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
dem_count <- prop_data %>%
summarize(democrats = sum(party),
other = n()- democrats,
total = n(),
democrats_prop = democrats/total,
other_prop = other/total)
glimpse(dem_count)
prop_data <- inteRactive231::piracy
prop_data$party <- recode(prop_data$party, "D" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
dem_count <- prop_data %>%
summarize(democrats = sum(party),
other = n()- democrats,
total = n(),
democrats_prop = democrats/total,
other_prop = other/total)
head(dem_count)
prop_data <- inteRactive231::piracy
prop_data$party <- recode(prop_data$party, "D" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
dem_count <- prop_data %>%
summarize(democrats = sum(party),
other = n()- democrats,
total = n(),
democrats_prop = democrats/total,
other_prop = other/total)
print(dem_count)
z <- categorical_z(dem_count$democrats_prop, 0.50, dem_count$total) #calculate z score
z # print z score
pval <- pnorm(z, lower.tail = FALSE) #calculate the p-value
pval #print the p-value
prop_ci(dem_count$democrats_prop, 0.05, dem_count$total)
summary_data <- inteRactive231::::piracy %>%
summary_data <- inteRactive231::piracy %>%
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) %>%
select(-c(money_pro, money_con)) %>%
filter(party!= "I")
library(tidyr)
summary_data <- inteRactive231::piracy %>%
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) %>%
select(-c(money_pro, money_con)) %>%
filter(party!= "I")
summary_data <- inteRactive231::piracy %>%
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) %>%
select(-c(money_pro, money_con))
View(summary_data)
summary_data <- inteRactive231::piracy %>%
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) %>%
select(-c(money_pro, money_con)) %>%
filter(party != "I")
prop_data <- inteRactive231::piracy
prop_data$party <- recode(prop_data$party, "D" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
dem_count <- prop_data |>
summarize(democrats = sum(party),
other = n()- democrats,
total = n(),
democrats_prop = democrats/total,
other_prop = other/total)
print(dem_count)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
View(summary_data)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter("party" != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter("party" != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
View(summary_data)
unique(summary_data$party)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter(party != "I")
View(summary_data)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter("party" != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter("party" != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- filter(summary_data$party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter(party != "I")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter(state == "NY")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
collapse = TRUE,
comment = "#>")
library(learnr)
library(dplyr)
library(magrittr)
library(infer)
library(openintro)
library(tidyr)
library(inteRactive231)
devtools::load_all()
prop_data <- inteRactive231::piracy
prop_data$party <- recode(prop_data$party, "D" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
dem_count <- prop_data |>
summarize(democrats = sum(party),
other = n()- democrats,
total = n(),
democrats_prop = democrats/total,
other_prop = other/total)
print(dem_count)
z <- categorical_z(dem_count$democrats_prop, 0.50, dem_count$total) #calculate z score
z # print z score
pval <- pnorm(z, lower.tail = FALSE) #calculate the p-value
pval #print the p-value
prop_ci(dem_count$democrats_prop, 0.05, dem_count$total)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
test <- summary_data |>
filter(state == "NY")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter(state == "NY")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
View(summary_data)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con,0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
filter("state" == "NY")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con, 0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con))
View(summary_data)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con, 0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
dplyr::filter("state" == "NY")
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con, 0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
dplyr::filter(state == "NY")
View(summary_data)
summary_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con, 0),
money_total = money_pro+money_con) |>
select(-c(money_pro, money_con)) |>
dplyr::filter(party != "I")
t_test(summary_data, #choose the data frame
formula = money_total~party, #define the relationship/variables for testing
order = c("D","R"), #choose an order for the mean difference to be calculated
mu = 0, #define the null hypothesis
alternative = "two.sided", #define the alternative hypothesis
var.equal = TRUE, #assume the populations have equal variance
conf_int = TRUE, #will calculate a confidence interval for the mean difference as part of the test
conf_level = 0.99) #defines the confidence/significance level
prop_data <- inteRactive231::piracy
prop_data$party <- recode(prop_data$party, "R" = 1, .default = 0)
prop_data$party <- as.double(prop_data$party)
rep_count <- prop_data |>
summarize(republicans = sum(party),
other = n() - republicans,
total = n(),
republicans_prop = republicans/total,
other_prop = other/total)
z <- categorical_z(rep_count$republicans_prop, 0.50, rep_count$total)
z
pval <- pnorm(z, lower.tail = FALSE)
pval
test_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con, 0),
money_total = money_pro+money_con)
View(test_data)
test_data <- inteRactive231::piracy |>
mutate(money_pro = replace_na(money_pro, 0),
money_con = replace_na(money_con, 0)) |>
pivot_longer(cols = c("money_pro", "money_con"), names_to = "lobby_group", values_to = "amount") |>
dplyr::filter(party == "D")
# Conclusion goes here.
View(test_data)
t_test(test_data,
formula = amount ~ lobby_group,
order = c("money_pro","money_con"),
mu = 0,
alternative = "two.sided",
var.equal = TRUE,
conf_int = TRUE,
conf_level = 0.99)
devtools::load_all()
library(inteRactive231)
library(readr)
piracy <- read_csv(here::here("data-raw/piracy/piracy.csv"))
usethis::use_data(piracy, overwrite = TRUE)
devtools::document()
library(inteRactive231)
summary(aov(price ~ clarity, data = diamonds))
library(ggplot2)
summary(aov(price ~ clarity, data = diamonds))
# P-Value
summary(aov(price ~ clarity, data = diamonds))
# Conclusion:
#-------------------------------------------------------------------------------
# Classic
qf(0.95, #1-alpha
df1 = 7,
df2 = 53932)
# Conclusion
# P-Value
summary(aov(price ~ color, data = diamonds))
# Conclusion:
#-------------------------------------------------------------------------------
# Classic
qf(0.95, #1-alpha
df1 = 7,
df2 = 53932)
# Conclusion
unique(diamonds$color)
length(unique(diamonds$color))
# P-Value
summary(aov(price ~ color, data = diamonds))
# Conclusion:
#-------------------------------------------------------------------------------
# Classic
qf(0.95, #1-alpha
df1 = 6,
df2 = 53932)
# Conclusion
model_data <- mariokart |>
select(n_bids, duration ,start_pr, ship_pr, total_pr) |>  #This line selects the variable we might need for our model.
mutate(price_diff = total_pr-ship_pr-start_pr) #This line calculates the difference between start and final price for each auction.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
collapse = TRUE,
comment = "#>")
library(learnr)
library(dplyr)
library(magrittr)
library(openintro)
library(ggplot2)
library(moderndive)
library(inteRactive231)
glimpse(mariokart)
model_data <- mariokart |>
select(n_bids, duration ,start_pr, ship_pr, total_pr) |>  #This line selects the variable we might need for our model.
mutate(price_diff = total_pr-ship_pr-start_pr) #This line calculates the difference between start and final price for each auction.
get_correlation(data = model_data, price_diff ~ duration)
get_correlation(data = model_data, price_diff ~ n_bids)
ggplot(model_data, aes(n_bids, price_diff))+
geom_point()
model_data_2 <- model_data %>%
filter(price_diff<300)
get_correlation(data = model_data_2, price_diff ~ n_bids)
ggplot(model_data_2, aes(n_bids, price_diff))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
price_model <- lm(data = model_data_2, price_diff ~ n_bids)
get_regression_table(price_model)
linear_model_prediction(price_model, 15)
linear_model_prediction(price_model, 100)
# NOTE: This is one possible solution for one possible data set.
# Correlation
get_correlation(data = cars93, price ~ mpg_city)
# Scatterplot
ggplot(cars93, aes(mpg_cit, price)) +
geom_point()
# NOTE: This is one possible solution for one possible data set.
# Correlation
get_correlation(data = cars93, price ~ mpg_city)
# Scatterplot
ggplot(cars93, aes(mpg_city, price)) +
geom_point()
# Regression Table
price_model <- lm(data = cars93, price ~ mpg_city)
get_regression_table(price_model)
# Scatterplot with model overlay
ggplot(cars93, aes(mpg_cit, price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# NOTE: This is one possible solution for one possible data set.
# Correlation
get_correlation(data = cars93, price ~ mpg_city)
# Scatterplot
ggplot(cars93, aes(mpg_city, price)) +
geom_point()
# Regression Table
price_model <- lm(data = cars93, price ~ mpg_city)
get_regression_table(price_model)
# Scatterplot with model overlay
ggplot(cars93, aes(mpg_city, price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Predictions
# Predictions
linear_model_prediction(price_model, 100)
linear_model_prediction(price_model, 30)
# NOTE: This is one possible solution for one possible data set.
# Correlation
get_correlation(data = cars93, price ~ mpg_city)
# Scatterplot
ggplot(cars93, aes(mpg_city, price)) +
geom_point()
# Regression Table
price_model <- lm(data = cars93, price ~ mpg_city)
get_regression_table(price_model)
# Scatterplot with model overlay
ggplot(cars93, aes(mpg_city, price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Predictions
linear_model_prediction(price_model, 100)
# A car getting 100 mpg would cost -$64.84.
linear_model_prediction(price_model, 30)
View(cars93)
library(inteRactive231)
>>>>>>> ded7e5728a67140eb5a1315bed0ee668dc7c1b5d
